
Compass.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00000a06  00000a9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  00800152  00800152  00000aec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013c5  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a18  00000000  00000000  00002011  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000729  00000000  00000000  00002a29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00003154  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000745  00000000  00000000  0000336c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000587  00000000  00000000  00003ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004038  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4a c0       	rjmp	.+148    	; 0x96 <__ctors_end>
   2:	00 00       	nop
   4:	63 c0       	rjmp	.+198    	; 0xcc <__bad_interrupt>
   6:	00 00       	nop
   8:	61 c0       	rjmp	.+194    	; 0xcc <__bad_interrupt>
   a:	00 00       	nop
   c:	5f c0       	rjmp	.+190    	; 0xcc <__bad_interrupt>
   e:	00 00       	nop
  10:	5d c0       	rjmp	.+186    	; 0xcc <__bad_interrupt>
  12:	00 00       	nop
  14:	5b c0       	rjmp	.+182    	; 0xcc <__bad_interrupt>
  16:	00 00       	nop
  18:	59 c0       	rjmp	.+178    	; 0xcc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	57 c0       	rjmp	.+174    	; 0xcc <__bad_interrupt>
  1e:	00 00       	nop
  20:	55 c0       	rjmp	.+170    	; 0xcc <__bad_interrupt>
  22:	00 00       	nop
  24:	53 c0       	rjmp	.+166    	; 0xcc <__bad_interrupt>
  26:	00 00       	nop
  28:	51 c0       	rjmp	.+162    	; 0xcc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4f c0       	rjmp	.+158    	; 0xcc <__bad_interrupt>
  2e:	00 00       	nop
  30:	4d c0       	rjmp	.+154    	; 0xcc <__bad_interrupt>
  32:	00 00       	nop
  34:	4b c0       	rjmp	.+150    	; 0xcc <__bad_interrupt>
  36:	00 00       	nop
  38:	49 c0       	rjmp	.+146    	; 0xcc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	47 c0       	rjmp	.+142    	; 0xcc <__bad_interrupt>
  3e:	00 00       	nop
  40:	45 c0       	rjmp	.+138    	; 0xcc <__bad_interrupt>
  42:	00 00       	nop
  44:	43 c0       	rjmp	.+134    	; 0xcc <__bad_interrupt>
  46:	00 00       	nop
  48:	70 c1       	rjmp	.+736    	; 0x32a <__vector_18>
  4a:	00 00       	nop
  4c:	99 c1       	rjmp	.+818    	; 0x380 <__vector_19>
  4e:	00 00       	nop
  50:	3d c0       	rjmp	.+122    	; 0xcc <__bad_interrupt>
  52:	00 00       	nop
  54:	3b c0       	rjmp	.+118    	; 0xcc <__bad_interrupt>
  56:	00 00       	nop
  58:	39 c0       	rjmp	.+114    	; 0xcc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	37 c0       	rjmp	.+110    	; 0xcc <__bad_interrupt>
  5e:	00 00       	nop
  60:	35 c0       	rjmp	.+106    	; 0xcc <__bad_interrupt>
  62:	00 00       	nop
  64:	33 c0       	rjmp	.+102    	; 0xcc <__bad_interrupt>
  66:	00 00       	nop
  68:	08 4a       	sbci	r16, 0xA8	; 168
  6a:	d7 3b       	cpi	r29, 0xB7	; 183
  6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
  6e:	01 6e       	ori	r16, 0xE1	; 225
  70:	84 bc       	out	0x24, r8	; 36
  72:	bf fd       	.word	0xfdbf	; ????
  74:	c1 2f       	mov	r28, r17
  76:	3d 6c       	ori	r19, 0xCD	; 205
  78:	74 31       	cpi	r23, 0x14	; 20
  7a:	9a bd       	out	0x2a, r25	; 42
  7c:	56 83       	std	Z+6, r21	; 0x06
  7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
  80:	3d 00       	.word	0x003d	; ????
  82:	c7 7f       	andi	r28, 0xF7	; 247
  84:	11 be       	out	0x31, r1	; 49
  86:	d9 e4       	ldi	r29, 0x49	; 73
  88:	bb 4c       	sbci	r27, 0xCB	; 203
  8a:	3e 91       	ld	r19, -X
  8c:	6b aa       	std	Y+51, r6	; 0x33
  8e:	aa be       	out	0x3a, r10	; 58
  90:	00 00       	nop
  92:	00 80       	ld	r0, Z
  94:	3f 00       	.word	0x003f	; ????

00000096 <__ctors_end>:
  96:	11 24       	eor	r1, r1
  98:	1f be       	out	0x3f, r1	; 63
  9a:	cf ef       	ldi	r28, 0xFF	; 255
  9c:	d8 e0       	ldi	r29, 0x08	; 8
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
  a2:	11 e0       	ldi	r17, 0x01	; 1
  a4:	a0 e0       	ldi	r26, 0x00	; 0
  a6:	b1 e0       	ldi	r27, 0x01	; 1
  a8:	e6 e0       	ldi	r30, 0x06	; 6
  aa:	fa e0       	ldi	r31, 0x0A	; 10
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <__do_copy_data+0x10>
  ae:	05 90       	lpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	a2 35       	cpi	r26, 0x52	; 82
  b4:	b1 07       	cpc	r27, r17
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0xc>

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a2 e5       	ldi	r26, 0x52	; 82
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a0 3a       	cpi	r26, 0xA0	; 160
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	25 d1       	rcall	.+586    	; 0x314 <main>
  ca:	9b c4       	rjmp	.+2358   	; 0xa02 <_exit>

000000cc <__bad_interrupt>:
  cc:	99 cf       	rjmp	.-206    	; 0x0 <__vectors>

000000ce <_ZN8I2C_NANO14i2c_initializeEv>:
#include "I2C_NANO.h"


void I2C_NANO::i2c_initialize()
{
	TWBR = TWBR_VAL;		//prescaler 1 with 100khz clk cycle
  ce:	88 e4       	ldi	r24, 0x48	; 72
  d0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  d4:	08 95       	ret

000000d6 <_ZN8I2C_NANO8i2c_stopEv>:
}

void I2C_NANO::i2c_stop()
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);		//stop bit set
  d6:	84 e9       	ldi	r24, 0x94	; 148
  d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	//wait until twi is stopped.
	
	while(TWCR & (1<<TWSTO));
  dc:	ec eb       	ldi	r30, 0xBC	; 188
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	84 fd       	sbrc	r24, 4
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <_ZN8I2C_NANO8i2c_stopEv+0xa>
}
  e6:	08 95       	ret

000000e8 <_ZN8I2C_NANO9i2c_startEh>:

bool I2C_NANO::i2c_start(unsigned char addr)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA);		//start bit set
  e8:	84 ea       	ldi	r24, 0xA4	; 164
  ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	//wait until transmitting
	
	while(!(TWCR & (1<<TWINT))); //TWINT 0 while transmitting and 1 after transmitting and wait for response
  ee:	ec eb       	ldi	r30, 0xBC	; 188
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	88 23       	and	r24, r24
  f6:	ec f7       	brge	.-6      	; 0xf2 <_ZN8I2C_NANO9i2c_startEh+0xa>
	
	if(((TWSR & 0xF8)!=0x10)&&((TWSR & 0xF8)!=0x08))	return 1;	//checking the status if the start or repeated condition is issued or not
  f8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  fc:	88 7f       	andi	r24, 0xF8	; 248
  fe:	80 31       	cpi	r24, 0x10	; 16
 100:	d1 f0       	breq	.+52     	; 0x136 <_ZN8I2C_NANO9i2c_startEh+0x4e>
 102:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 106:	88 7f       	andi	r24, 0xF8	; 248
 108:	88 30       	cpi	r24, 0x08	; 8
 10a:	99 f4       	brne	.+38     	; 0x132 <_ZN8I2C_NANO9i2c_startEh+0x4a>
 10c:	14 c0       	rjmp	.+40     	; 0x136 <_ZN8I2C_NANO9i2c_startEh+0x4e>
	TWDR = addr;	//adding address on twi data register
	TWCR = (1<<TWINT)|(1<<TWEN);
	
	//for ack or nack signal 
	//wait until transmission
	while(!(TWCR & (1<<TWINT)));
 10e:	80 81       	ld	r24, Z
 110:	88 23       	and	r24, r24
 112:	ec f7       	brge	.-6      	; 0x10e <_ZN8I2C_NANO9i2c_startEh+0x26>
	if ((TWSR & 0xF8)!=0x18 && (TWSR & 0xF8)!=0x40)	return 1;		//master write and ack signal check
 114:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 118:	88 7f       	andi	r24, 0xF8	; 248
 11a:	88 31       	cpi	r24, 0x18	; 24
 11c:	41 f0       	breq	.+16     	; 0x12e <_ZN8I2C_NANO9i2c_startEh+0x46>
 11e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 122:	98 7f       	andi	r25, 0xF8	; 248
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 34       	cpi	r25, 0x40	; 64
 128:	71 f4       	brne	.+28     	; 0x146 <_ZN8I2C_NANO9i2c_startEh+0x5e>
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	08 95       	ret
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	08 95       	ret
	
	//wait until transmitting
	
	while(!(TWCR & (1<<TWINT))); //TWINT 0 while transmitting and 1 after transmitting and wait for response
	
	if(((TWSR & 0xF8)!=0x10)&&((TWSR & 0xF8)!=0x08))	return 1;	//checking the status if the start or repeated condition is issued or not
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	08 95       	ret
	
	TWDR = addr;	//adding address on twi data register
 136:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);
 13a:	84 e8       	ldi	r24, 0x84	; 132
 13c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	//for ack or nack signal 
	//wait until transmission
	while(!(TWCR & (1<<TWINT)));
 140:	ec eb       	ldi	r30, 0xBC	; 188
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	e4 cf       	rjmp	.-56     	; 0x10e <_ZN8I2C_NANO9i2c_startEh+0x26>
	if ((TWSR & 0xF8)!=0x18 && (TWSR & 0xF8)!=0x40)	return 1;		//master write and ack signal check
	return 0;
}
 146:	08 95       	ret

00000148 <_ZN8I2C_NANO12i2c_repStartEh>:

bool I2C_NANO::i2c_repStart(unsigned char addrss)
{
	return i2c_start(addrss);
 148:	cf cf       	rjmp	.-98     	; 0xe8 <_ZN8I2C_NANO9i2c_startEh>
}
 14a:	08 95       	ret

0000014c <_ZN8I2C_NANO13i2c_writedataEh>:

bool I2C_NANO::i2c_writedata(unsigned char data)
{
	TWDR = data;
 14c:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);
 150:	84 e8       	ldi	r24, 0x84	; 132
 152:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	while(!(TWCR & (1<<TWINT)));
 156:	ec eb       	ldi	r30, 0xBC	; 188
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	ec f7       	brge	.-6      	; 0x15a <_ZN8I2C_NANO13i2c_writedataEh+0xe>
	
	if ((TWSR & 0xF8) != 0x28) return 1; //data sent and ack received 
 160:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 164:	98 7f       	andi	r25, 0xF8	; 248
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	98 32       	cpi	r25, 0x28	; 40
 16a:	09 f4       	brne	.+2      	; 0x16e <_ZN8I2C_NANO13i2c_writedataEh+0x22>
 16c:	80 e0       	ldi	r24, 0x00	; 0
	return 0;	
}
 16e:	08 95       	ret

00000170 <_ZN8I2C_NANO11i2c_readACKEv>:

unsigned char I2C_NANO::i2c_readACK()
{
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);//ack enable
 170:	84 ec       	ldi	r24, 0xC4	; 196
 172:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 176:	ec eb       	ldi	r30, 0xBC	; 188
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	88 23       	and	r24, r24
 17e:	ec f7       	brge	.-6      	; 0x17a <_ZN8I2C_NANO11i2c_readACKEv+0xa>
	return TWDR;
 180:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 184:	08 95       	ret

00000186 <_ZN8I2C_NANO12i2c_readNACKEv>:

unsigned char I2C_NANO::i2c_readNACK()
{
	TWCR = (1<<TWEN) | (1<<TWINT);// ack disable
 186:	84 e8       	ldi	r24, 0x84	; 132
 188:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 18c:	ec eb       	ldi	r30, 0xBC	; 188
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	88 23       	and	r24, r24
 194:	ec f7       	brge	.-6      	; 0x190 <_ZN8I2C_NANO12i2c_readNACKEv+0xa>
	return TWDR;
 196:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 19a:	08 95       	ret

0000019c <_Z12init_compassv>:
I2C_NANO Hmc5883l;
int angle;

void init_compass()
{
	Hmc5883l.i2c_initialize();
 19c:	84 e5       	ldi	r24, 0x54	; 84
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	96 df       	rcall	.-212    	; 0xce <_ZN8I2C_NANO14i2c_initializeEv>
	
	Hmc5883l.i2c_start(WRITE_ADDRESS);
 1a2:	6c e3       	ldi	r22, 0x3C	; 60
 1a4:	84 e5       	ldi	r24, 0x54	; 84
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	9f df       	rcall	.-194    	; 0xe8 <_ZN8I2C_NANO9i2c_startEh>
	Hmc5883l.i2c_writedata(0x00);//set pointer CRA and no of data =8 at rate 15 hz
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	84 e5       	ldi	r24, 0x54	; 84
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	cd df       	rcall	.-102    	; 0x14c <_ZN8I2C_NANO13i2c_writedataEh>
	Hmc5883l.i2c_writedata(0x70);
 1b2:	60 e7       	ldi	r22, 0x70	; 112
 1b4:	84 e5       	ldi	r24, 0x54	; 84
 1b6:	91 e0       	ldi	r25, 0x01	; 1
	Hmc5883l.i2c_stop();
 1b8:	c9 df       	rcall	.-110    	; 0x14c <_ZN8I2C_NANO13i2c_writedataEh>
 1ba:	84 e5       	ldi	r24, 0x54	; 84
 1bc:	91 e0       	ldi	r25, 0x01	; 1
	
	Hmc5883l.i2c_start(WRITE_ADDRESS);
 1be:	8b df       	rcall	.-234    	; 0xd6 <_ZN8I2C_NANO8i2c_stopEv>
 1c0:	6c e3       	ldi	r22, 0x3C	; 60
 1c2:	84 e5       	ldi	r24, 0x54	; 84
 1c4:	91 e0       	ldi	r25, 0x01	; 1
	Hmc5883l.i2c_writedata(0x01);	//set pointer CRB and 0xA0
 1c6:	90 df       	rcall	.-224    	; 0xe8 <_ZN8I2C_NANO9i2c_startEh>
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	84 e5       	ldi	r24, 0x54	; 84
 1cc:	91 e0       	ldi	r25, 0x01	; 1
	Hmc5883l.i2c_writedata(0xA0);
 1ce:	be df       	rcall	.-132    	; 0x14c <_ZN8I2C_NANO13i2c_writedataEh>
 1d0:	60 ea       	ldi	r22, 0xA0	; 160
 1d2:	84 e5       	ldi	r24, 0x54	; 84
 1d4:	91 e0       	ldi	r25, 0x01	; 1
	Hmc5883l.i2c_stop();
 1d6:	ba df       	rcall	.-140    	; 0x14c <_ZN8I2C_NANO13i2c_writedataEh>
 1d8:	84 e5       	ldi	r24, 0x54	; 84
 1da:	91 e0       	ldi	r25, 0x01	; 1
	
	Hmc5883l.i2c_start(WRITE_ADDRESS);
 1dc:	7c df       	rcall	.-264    	; 0xd6 <_ZN8I2C_NANO8i2c_stopEv>
 1de:	6c e3       	ldi	r22, 0x3C	; 60
 1e0:	84 e5       	ldi	r24, 0x54	; 84
 1e2:	91 e0       	ldi	r25, 0x01	; 1
	Hmc5883l.i2c_writedata(0x02);
 1e4:	81 df       	rcall	.-254    	; 0xe8 <_ZN8I2C_NANO9i2c_startEh>
 1e6:	62 e0       	ldi	r22, 0x02	; 2
 1e8:	84 e5       	ldi	r24, 0x54	; 84
	Hmc5883l.i2c_writedata(0x00);	//continous measurement mode
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	af df       	rcall	.-162    	; 0x14c <_ZN8I2C_NANO13i2c_writedataEh>
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	84 e5       	ldi	r24, 0x54	; 84
 1f2:	91 e0       	ldi	r25, 0x01	; 1
	Hmc5883l.i2c_stop();
 1f4:	ab df       	rcall	.-170    	; 0x14c <_ZN8I2C_NANO13i2c_writedataEh>
 1f6:	84 e5       	ldi	r24, 0x54	; 84
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	6d df       	rcall	.-294    	; 0xd6 <_ZN8I2C_NANO8i2c_stopEv>
	uart0_puts("initialisation completed\n");
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	3f c1       	rjmp	.+638    	; 0x480 <_Z10uart0_putsPKc>
 202:	08 95       	ret

00000204 <_Z16readcompass_datav>:
 204:	6c e3       	ldi	r22, 0x3C	; 60
}

void readcompass_data()
{
	
	Hmc5883l.i2c_start(WRITE_ADDRESS);
 206:	84 e5       	ldi	r24, 0x54	; 84
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	6e df       	rcall	.-292    	; 0xe8 <_ZN8I2C_NANO9i2c_startEh>

	Hmc5883l.i2c_writedata(0x03); //set pointer to X-axis MSB
 20c:	63 e0       	ldi	r22, 0x03	; 3
 20e:	84 e5       	ldi	r24, 0x54	; 84
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	9c df       	rcall	.-200    	; 0x14c <_ZN8I2C_NANO13i2c_writedataEh>
	Hmc5883l.i2c_stop();
 214:	84 e5       	ldi	r24, 0x54	; 84
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	5e df       	rcall	.-324    	; 0xd6 <_ZN8I2C_NANO8i2c_stopEv>

	Hmc5883l.i2c_repStart(READ_ADDRESS);
 21a:	6d e3       	ldi	r22, 0x3D	; 61
 21c:	84 e5       	ldi	r24, 0x54	; 84
 21e:	91 e0       	ldi	r25, 0x01	; 1
	
		uart0_puts("initialise 1\n");
 220:	93 df       	rcall	.-218    	; 0x148 <_ZN8I2C_NANO12i2c_repStartEh>
 222:	8a e1       	ldi	r24, 0x1A	; 26
 224:	91 e0       	ldi	r25, 0x01	; 1
	x_raw = ((uint8_t)Hmc5883l.i2c_readACK())<<8;
 226:	2c d1       	rcall	.+600    	; 0x480 <_Z10uart0_putsPKc>
 228:	84 e5       	ldi	r24, 0x54	; 84
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	a1 df       	rcall	.-190    	; 0x170 <_ZN8I2C_NANO11i2c_readACKEv>
 22e:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <x_raw>
 232:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <x_raw+0x1>
	x_raw |= Hmc5883l.i2c_readACK();
 236:	84 e5       	ldi	r24, 0x54	; 84
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	9a df       	rcall	.-204    	; 0x170 <_ZN8I2C_NANO11i2c_readACKEv>
 23c:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <x_raw>
 240:	30 91 5a 01 	lds	r19, 0x015A	; 0x80015a <x_raw+0x1>
 244:	28 2b       	or	r18, r24
 246:	30 93 5a 01 	sts	0x015A, r19	; 0x80015a <x_raw+0x1>
	uart0_puts("initialise 2\n");
 24a:	20 93 59 01 	sts	0x0159, r18	; 0x800159 <x_raw>
 24e:	88 e2       	ldi	r24, 0x28	; 40
 250:	91 e0       	ldi	r25, 0x01	; 1
	
	z_raw = ((uint8_t)Hmc5883l.i2c_readACK())<<8;
 252:	16 d1       	rcall	.+556    	; 0x480 <_Z10uart0_putsPKc>
 254:	84 e5       	ldi	r24, 0x54	; 84
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	8b df       	rcall	.-234    	; 0x170 <_ZN8I2C_NANO11i2c_readACKEv>
 25a:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <z_raw>
 25e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <z_raw+0x1>
	z_raw |= Hmc5883l.i2c_readACK();
 262:	84 e5       	ldi	r24, 0x54	; 84
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	84 df       	rcall	.-248    	; 0x170 <_ZN8I2C_NANO11i2c_readACKEv>
 268:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <z_raw>
 26c:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <z_raw+0x1>
 270:	28 2b       	or	r18, r24
 272:	30 93 56 01 	sts	0x0156, r19	; 0x800156 <z_raw+0x1>
	uart0_puts("initialise 3\n");
 276:	20 93 55 01 	sts	0x0155, r18	; 0x800155 <z_raw>
 27a:	86 e3       	ldi	r24, 0x36	; 54
	
	y_raw = ((uint8_t)Hmc5883l.i2c_readACK())<<8;
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	00 d1       	rcall	.+512    	; 0x480 <_Z10uart0_putsPKc>
 280:	84 e5       	ldi	r24, 0x54	; 84
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	75 df       	rcall	.-278    	; 0x170 <_ZN8I2C_NANO11i2c_readACKEv>
 286:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <y_raw>
 28a:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <y_raw+0x1>
	y_raw |= Hmc5883l.i2c_readNACK();
 28e:	84 e5       	ldi	r24, 0x54	; 84
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	79 df       	rcall	.-270    	; 0x186 <_ZN8I2C_NANO12i2c_readNACKEv>
 294:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <y_raw>
 298:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <y_raw+0x1>
 29c:	28 2b       	or	r18, r24
 29e:	30 93 58 01 	sts	0x0158, r19	; 0x800158 <y_raw+0x1>
	uart0_puts("initialise 4\n");
 2a2:	20 93 57 01 	sts	0x0157, r18	; 0x800157 <y_raw>
 2a6:	84 e4       	ldi	r24, 0x44	; 68
 2a8:	91 e0       	ldi	r25, 0x01	; 1
	
	Hmc5883l.i2c_stop();
 2aa:	ea d0       	rcall	.+468    	; 0x480 <_Z10uart0_putsPKc>
 2ac:	84 e5       	ldi	r24, 0x54	; 84
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	12 cf       	rjmp	.-476    	; 0xd6 <_ZN8I2C_NANO8i2c_stopEv>
 2b2:	08 95       	ret

000002b4 <_Z16Getcompass_anglev>:

}

int Getcompass_angle()
{
 2b4:	cf 92       	push	r12
 2b6:	df 92       	push	r13
 2b8:	ef 92       	push	r14
 2ba:	ff 92       	push	r15
	angle = ((180.0/3.1415)*atan2(y_raw,x_raw)+180);
 2bc:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <x_raw>
 2c0:	70 91 5a 01 	lds	r23, 0x015A	; 0x80015a <x_raw+0x1>
 2c4:	07 2e       	mov	r0, r23
 2c6:	00 0c       	add	r0, r0
 2c8:	88 0b       	sbc	r24, r24
 2ca:	99 0b       	sbc	r25, r25
 2cc:	47 d2       	rcall	.+1166   	; 0x75c <__floatsisf>
 2ce:	6b 01       	movw	r12, r22
 2d0:	7c 01       	movw	r14, r24
 2d2:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <y_raw>
 2d6:	70 91 58 01 	lds	r23, 0x0158	; 0x800158 <y_raw+0x1>
 2da:	07 2e       	mov	r0, r23
 2dc:	00 0c       	add	r0, r0
 2de:	88 0b       	sbc	r24, r24
 2e0:	99 0b       	sbc	r25, r25
 2e2:	3c d2       	rcall	.+1144   	; 0x75c <__floatsisf>
 2e4:	a7 01       	movw	r20, r14
 2e6:	96 01       	movw	r18, r12
 2e8:	4d d1       	rcall	.+666    	; 0x584 <atan2>
 2ea:	2c e9       	ldi	r18, 0x9C	; 156
 2ec:	30 e3       	ldi	r19, 0x30	; 48
 2ee:	45 e6       	ldi	r20, 0x65	; 101
 2f0:	52 e4       	ldi	r21, 0x42	; 66
 2f2:	ec d2       	rcall	.+1496   	; 0x8cc <__mulsf3>
 2f4:	20 e0       	ldi	r18, 0x00	; 0
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	44 e3       	ldi	r20, 0x34	; 52
 2fa:	53 e4       	ldi	r21, 0x43	; 67
 2fc:	d0 d0       	rcall	.+416    	; 0x49e <__addsf3>
 2fe:	fb d1       	rcall	.+1014   	; 0x6f6 <__fixsfsi>
 300:	70 93 53 01 	sts	0x0153, r23	; 0x800153 <__data_end+0x1>
 304:	60 93 52 01 	sts	0x0152, r22	; 0x800152 <__data_end>
	return angle;
}
 308:	cb 01       	movw	r24, r22
 30a:	ff 90       	pop	r15
 30c:	ef 90       	pop	r14
 30e:	df 90       	pop	r13
 310:	cf 90       	pop	r12
 312:	08 95       	ret

00000314 <main>:
#define F_CPU	16000000UL
#endif

int main(void)
{
	sei();
 314:	78 94       	sei
	  uart0_init(UART_BAUD_SELECT(9600,F_CPU));
 316:	87 e6       	ldi	r24, 0x67	; 103
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	5c d0       	rcall	.+184    	; 0x3d4 <_Z10uart0_initj>
	init_compass();
 31c:	3f df       	rcall	.-386    	; 0x19c <_Z12init_compassv>
 
    while (1) 
    {
		readcompass_data();
 31e:	72 df       	rcall	.-284    	; 0x204 <_Z16readcompass_datav>
		uart0_putint(Getcompass_angle());
 320:	c9 df       	rcall	.-110    	; 0x2b4 <_Z16Getcompass_anglev>
 322:	86 d0       	rcall	.+268    	; 0x430 <_Z12uart0_putinti>
 324:	8a e0       	ldi	r24, 0x0A	; 10
		uart0_putc('\n');
 326:	6f d0       	rcall	.+222    	; 0x406 <_Z10uart0_putch>
 328:	fa cf       	rjmp	.-12     	; 0x31e <main+0xa>

0000032a <__vector_18>:
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
	/* get data from receive buffer */
	data = UART0_RxBuf[tmptail];

	return (UART0_LastRxError << 8) + data;

}/* uart_getc */
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
 334:	2f 93       	push	r18
 336:	8f 93       	push	r24
 338:	9f 93       	push	r25
 33a:	ef 93       	push	r30
 33c:	ff 93       	push	r31
 33e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 342:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 346:	88 71       	andi	r24, 0x18	; 24
 348:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <_ZL12UART0_RxHead>
 34c:	ef 5f       	subi	r30, 0xFF	; 255
 34e:	ef 71       	andi	r30, 0x1F	; 31
 350:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <_ZL12UART0_RxTail>
 354:	e9 17       	cp	r30, r25
 356:	39 f0       	breq	.+14     	; 0x366 <__vector_18+0x3c>
 358:	e0 93 5d 01 	sts	0x015D, r30	; 0x80015d <_ZL12UART0_RxHead>
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	e0 5a       	subi	r30, 0xA0	; 160
 360:	fe 4f       	sbci	r31, 0xFE	; 254
 362:	20 83       	st	Z, r18
 364:	01 c0       	rjmp	.+2      	; 0x368 <__vector_18+0x3e>
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <_ZL17UART0_LastRxError>
 36c:	ff 91       	pop	r31
 36e:	ef 91       	pop	r30
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	2f 91       	pop	r18
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <__vector_19>:
 380:	1f 92       	push	r1
 382:	0f 92       	push	r0
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	0f 92       	push	r0
 388:	11 24       	eor	r1, r1
 38a:	8f 93       	push	r24
 38c:	9f 93       	push	r25
 38e:	ef 93       	push	r30
 390:	ff 93       	push	r31
 392:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <_ZL12UART0_TxHead>
 396:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <_ZL12UART0_TxTail>
 39a:	98 17       	cp	r25, r24
 39c:	69 f0       	breq	.+26     	; 0x3b8 <__vector_19+0x38>
 39e:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <_ZL12UART0_TxTail>
 3a2:	ef 5f       	subi	r30, 0xFF	; 255
 3a4:	ef 71       	andi	r30, 0x1F	; 31
 3a6:	e0 93 5e 01 	sts	0x015E, r30	; 0x80015e <_ZL12UART0_TxTail>
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	e0 58       	subi	r30, 0x80	; 128
 3ae:	fe 4f       	sbci	r31, 0xFE	; 254
 3b0:	80 81       	ld	r24, Z
 3b2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3b6:	05 c0       	rjmp	.+10     	; 0x3c2 <__vector_19+0x42>
 3b8:	e1 ec       	ldi	r30, 0xC1	; 193
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	8f 7d       	andi	r24, 0xDF	; 223
 3c0:	80 83       	st	Z, r24
 3c2:	ff 91       	pop	r31
 3c4:	ef 91       	pop	r30
 3c6:	9f 91       	pop	r25
 3c8:	8f 91       	pop	r24
 3ca:	0f 90       	pop	r0
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <_Z10uart0_initj>:
 3d4:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <_ZL12UART0_TxHead>
 3d8:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <_ZL12UART0_TxTail>
 3dc:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <_ZL12UART0_RxHead>
 3e0:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <_ZL12UART0_RxTail>
 3e4:	99 23       	and	r25, r25
 3e6:	24 f4       	brge	.+8      	; 0x3f0 <_Z10uart0_initj+0x1c>
 3e8:	22 e0       	ldi	r18, 0x02	; 2
 3ea:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 3ee:	9f 77       	andi	r25, 0x7F	; 127
 3f0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 3f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 3f8:	88 e9       	ldi	r24, 0x98	; 152
 3fa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 3fe:	86 e0       	ldi	r24, 0x06	; 6
 400:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 404:	08 95       	ret

00000406 <_Z10uart0_putch>:
void uart0_putc(unsigned char data)
{
	unsigned char tmphead;


	tmphead = (UART0_TxHead + 1) & UART_TX_BUFFER_MASK;
 406:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <_ZL12UART0_TxHead>
 40a:	2f 5f       	subi	r18, 0xFF	; 255
 40c:	2f 71       	andi	r18, 0x1F	; 31

	while (tmphead == UART0_TxTail) {
 40e:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <_ZL12UART0_TxTail>
 412:	29 17       	cp	r18, r25
 414:	e1 f3       	breq	.-8      	; 0x40e <_Z10uart0_putch+0x8>
		;/* wait for free space in buffer */
	}

	UART0_TxBuf[tmphead] = data;
 416:	e2 2f       	mov	r30, r18
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	e0 58       	subi	r30, 0x80	; 128
 41c:	fe 4f       	sbci	r31, 0xFE	; 254
 41e:	80 83       	st	Z, r24
	UART0_TxHead = tmphead;
 420:	20 93 5f 01 	sts	0x015F, r18	; 0x80015f <_ZL12UART0_TxHead>

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
 424:	e1 ec       	ldi	r30, 0xC1	; 193
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	80 62       	ori	r24, 0x20	; 32
 42c:	80 83       	st	Z, r24
 42e:	08 95       	ret

00000430 <_Z12uart0_putinti>:
 Purpose:  transmit integer to UART0
 Input:    integer to be transmitted
 Returns:  none
 **************************************************************************/
void uart0_putint(int input)
{
 430:	0f 93       	push	r16
 432:	1f 93       	push	r17
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
 43c:	2f 97       	sbiw	r28, 0x0f	; 15
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	f8 94       	cli
 442:	de bf       	out	0x3e, r29	; 62
 444:	0f be       	out	0x3f, r0	; 63
 446:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 448:	4a e0       	ldi	r20, 0x0A	; 10
 44a:	be 01       	movw	r22, r28
 44c:	6f 5f       	subi	r22, 0xFF	; 255
 44e:	7f 4f       	sbci	r23, 0xFF	; 255
 450:	a5 d2       	rcall	.+1354   	; 0x99c <__itoa_ncheck>
	char buffer[15];
	itoa(input,buffer,10);
	char * s = buffer;
	while (*s)
 452:	89 81       	ldd	r24, Y+1	; 0x01
 454:	88 23       	and	r24, r24
 456:	49 f0       	breq	.+18     	; 0x46a <_Z12uart0_putinti+0x3a>
 458:	8e 01       	movw	r16, r28
 45a:	0e 5f       	subi	r16, 0xFE	; 254
	uart0_putc(*s++);
 45c:	1f 4f       	sbci	r17, 0xFF	; 255
 45e:	d3 df       	rcall	.-90     	; 0x406 <_Z10uart0_putch>
void uart0_putint(int input)
{
	char buffer[15];
	itoa(input,buffer,10);
	char * s = buffer;
	while (*s)
 460:	f8 01       	movw	r30, r16
 462:	81 91       	ld	r24, Z+
 464:	8f 01       	movw	r16, r30
 466:	81 11       	cpse	r24, r1
 468:	fa cf       	rjmp	.-12     	; 0x45e <_Z12uart0_putinti+0x2e>
	uart0_putc(*s++);

	}/* uart0_putint */
 46a:	2f 96       	adiw	r28, 0x0f	; 15
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
 470:	de bf       	out	0x3e, r29	; 62
 472:	0f be       	out	0x3f, r0	; 63
 474:	cd bf       	out	0x3d, r28	; 61
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	1f 91       	pop	r17
 47c:	0f 91       	pop	r16
 47e:	08 95       	ret

00000480 <_Z10uart0_putsPKc>:
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart0_puts(const char *s)
{
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	ec 01       	movw	r28, r24
	while (*s)
 486:	88 81       	ld	r24, Y
 488:	88 23       	and	r24, r24
 48a:	29 f0       	breq	.+10     	; 0x496 <_Z10uart0_putsPKc+0x16>
 48c:	21 96       	adiw	r28, 0x01	; 1
		uart0_putc(*s++);
 48e:	bb df       	rcall	.-138    	; 0x406 <_Z10uart0_putch>
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart0_puts(const char *s)
{
	while (*s)
 490:	89 91       	ld	r24, Y+
 492:	81 11       	cpse	r24, r1
 494:	fc cf       	rjmp	.-8      	; 0x48e <_Z10uart0_putsPKc+0xe>
		uart0_putc(*s++);

}/* uart_puts */
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	08 95       	ret

0000049c <__subsf3>:
 49c:	50 58       	subi	r21, 0x80	; 128

0000049e <__addsf3>:
 49e:	bb 27       	eor	r27, r27
 4a0:	aa 27       	eor	r26, r26
 4a2:	0e d0       	rcall	.+28     	; 0x4c0 <__addsf3x>
 4a4:	d2 c1       	rjmp	.+932    	; 0x84a <__fp_round>
 4a6:	c3 d1       	rcall	.+902    	; 0x82e <__fp_pscA>
 4a8:	30 f0       	brcs	.+12     	; 0x4b6 <__addsf3+0x18>
 4aa:	c8 d1       	rcall	.+912    	; 0x83c <__fp_pscB>
 4ac:	20 f0       	brcs	.+8      	; 0x4b6 <__addsf3+0x18>
 4ae:	31 f4       	brne	.+12     	; 0x4bc <__addsf3+0x1e>
 4b0:	9f 3f       	cpi	r25, 0xFF	; 255
 4b2:	11 f4       	brne	.+4      	; 0x4b8 <__addsf3+0x1a>
 4b4:	1e f4       	brtc	.+6      	; 0x4bc <__addsf3+0x1e>
 4b6:	93 c1       	rjmp	.+806    	; 0x7de <__fp_nan>
 4b8:	0e f4       	brtc	.+2      	; 0x4bc <__addsf3+0x1e>
 4ba:	e0 95       	com	r30
 4bc:	e7 fb       	bst	r30, 7
 4be:	89 c1       	rjmp	.+786    	; 0x7d2 <__fp_inf>

000004c0 <__addsf3x>:
 4c0:	e9 2f       	mov	r30, r25
 4c2:	d4 d1       	rcall	.+936    	; 0x86c <__fp_split3>
 4c4:	80 f3       	brcs	.-32     	; 0x4a6 <__addsf3+0x8>
 4c6:	ba 17       	cp	r27, r26
 4c8:	62 07       	cpc	r22, r18
 4ca:	73 07       	cpc	r23, r19
 4cc:	84 07       	cpc	r24, r20
 4ce:	95 07       	cpc	r25, r21
 4d0:	18 f0       	brcs	.+6      	; 0x4d8 <__addsf3x+0x18>
 4d2:	71 f4       	brne	.+28     	; 0x4f0 <__addsf3x+0x30>
 4d4:	9e f5       	brtc	.+102    	; 0x53c <__addsf3x+0x7c>
 4d6:	ec c1       	rjmp	.+984    	; 0x8b0 <__fp_zero>
 4d8:	0e f4       	brtc	.+2      	; 0x4dc <__addsf3x+0x1c>
 4da:	e0 95       	com	r30
 4dc:	0b 2e       	mov	r0, r27
 4de:	ba 2f       	mov	r27, r26
 4e0:	a0 2d       	mov	r26, r0
 4e2:	0b 01       	movw	r0, r22
 4e4:	b9 01       	movw	r22, r18
 4e6:	90 01       	movw	r18, r0
 4e8:	0c 01       	movw	r0, r24
 4ea:	ca 01       	movw	r24, r20
 4ec:	a0 01       	movw	r20, r0
 4ee:	11 24       	eor	r1, r1
 4f0:	ff 27       	eor	r31, r31
 4f2:	59 1b       	sub	r21, r25
 4f4:	99 f0       	breq	.+38     	; 0x51c <__addsf3x+0x5c>
 4f6:	59 3f       	cpi	r21, 0xF9	; 249
 4f8:	50 f4       	brcc	.+20     	; 0x50e <__addsf3x+0x4e>
 4fa:	50 3e       	cpi	r21, 0xE0	; 224
 4fc:	68 f1       	brcs	.+90     	; 0x558 <__addsf3x+0x98>
 4fe:	1a 16       	cp	r1, r26
 500:	f0 40       	sbci	r31, 0x00	; 0
 502:	a2 2f       	mov	r26, r18
 504:	23 2f       	mov	r18, r19
 506:	34 2f       	mov	r19, r20
 508:	44 27       	eor	r20, r20
 50a:	58 5f       	subi	r21, 0xF8	; 248
 50c:	f3 cf       	rjmp	.-26     	; 0x4f4 <__addsf3x+0x34>
 50e:	46 95       	lsr	r20
 510:	37 95       	ror	r19
 512:	27 95       	ror	r18
 514:	a7 95       	ror	r26
 516:	f0 40       	sbci	r31, 0x00	; 0
 518:	53 95       	inc	r21
 51a:	c9 f7       	brne	.-14     	; 0x50e <__addsf3x+0x4e>
 51c:	7e f4       	brtc	.+30     	; 0x53c <__addsf3x+0x7c>
 51e:	1f 16       	cp	r1, r31
 520:	ba 0b       	sbc	r27, r26
 522:	62 0b       	sbc	r22, r18
 524:	73 0b       	sbc	r23, r19
 526:	84 0b       	sbc	r24, r20
 528:	ba f0       	brmi	.+46     	; 0x558 <__addsf3x+0x98>
 52a:	91 50       	subi	r25, 0x01	; 1
 52c:	a1 f0       	breq	.+40     	; 0x556 <__addsf3x+0x96>
 52e:	ff 0f       	add	r31, r31
 530:	bb 1f       	adc	r27, r27
 532:	66 1f       	adc	r22, r22
 534:	77 1f       	adc	r23, r23
 536:	88 1f       	adc	r24, r24
 538:	c2 f7       	brpl	.-16     	; 0x52a <__addsf3x+0x6a>
 53a:	0e c0       	rjmp	.+28     	; 0x558 <__addsf3x+0x98>
 53c:	ba 0f       	add	r27, r26
 53e:	62 1f       	adc	r22, r18
 540:	73 1f       	adc	r23, r19
 542:	84 1f       	adc	r24, r20
 544:	48 f4       	brcc	.+18     	; 0x558 <__addsf3x+0x98>
 546:	87 95       	ror	r24
 548:	77 95       	ror	r23
 54a:	67 95       	ror	r22
 54c:	b7 95       	ror	r27
 54e:	f7 95       	ror	r31
 550:	9e 3f       	cpi	r25, 0xFE	; 254
 552:	08 f0       	brcs	.+2      	; 0x556 <__addsf3x+0x96>
 554:	b3 cf       	rjmp	.-154    	; 0x4bc <__addsf3+0x1e>
 556:	93 95       	inc	r25
 558:	88 0f       	add	r24, r24
 55a:	08 f0       	brcs	.+2      	; 0x55e <__addsf3x+0x9e>
 55c:	99 27       	eor	r25, r25
 55e:	ee 0f       	add	r30, r30
 560:	97 95       	ror	r25
 562:	87 95       	ror	r24
 564:	08 95       	ret
 566:	63 d1       	rcall	.+710    	; 0x82e <__fp_pscA>
 568:	58 f0       	brcs	.+22     	; 0x580 <__addsf3x+0xc0>
 56a:	80 e8       	ldi	r24, 0x80	; 128
 56c:	91 e0       	ldi	r25, 0x01	; 1
 56e:	09 f4       	brne	.+2      	; 0x572 <__addsf3x+0xb2>
 570:	9e ef       	ldi	r25, 0xFE	; 254
 572:	64 d1       	rcall	.+712    	; 0x83c <__fp_pscB>
 574:	28 f0       	brcs	.+10     	; 0x580 <__addsf3x+0xc0>
 576:	40 e8       	ldi	r20, 0x80	; 128
 578:	51 e0       	ldi	r21, 0x01	; 1
 57a:	59 f4       	brne	.+22     	; 0x592 <atan2+0xe>
 57c:	5e ef       	ldi	r21, 0xFE	; 254
 57e:	09 c0       	rjmp	.+18     	; 0x592 <atan2+0xe>
 580:	2e c1       	rjmp	.+604    	; 0x7de <__fp_nan>
 582:	96 c1       	rjmp	.+812    	; 0x8b0 <__fp_zero>

00000584 <atan2>:
 584:	e9 2f       	mov	r30, r25
 586:	e0 78       	andi	r30, 0x80	; 128
 588:	71 d1       	rcall	.+738    	; 0x86c <__fp_split3>
 58a:	68 f3       	brcs	.-38     	; 0x566 <__addsf3x+0xa6>
 58c:	09 2e       	mov	r0, r25
 58e:	05 2a       	or	r0, r21
 590:	c1 f3       	breq	.-16     	; 0x582 <__addsf3x+0xc2>
 592:	26 17       	cp	r18, r22
 594:	37 07       	cpc	r19, r23
 596:	48 07       	cpc	r20, r24
 598:	59 07       	cpc	r21, r25
 59a:	38 f0       	brcs	.+14     	; 0x5aa <atan2+0x26>
 59c:	0e 2e       	mov	r0, r30
 59e:	07 f8       	bld	r0, 7
 5a0:	e0 25       	eor	r30, r0
 5a2:	69 f0       	breq	.+26     	; 0x5be <atan2+0x3a>
 5a4:	e0 25       	eor	r30, r0
 5a6:	e0 64       	ori	r30, 0x40	; 64
 5a8:	0a c0       	rjmp	.+20     	; 0x5be <atan2+0x3a>
 5aa:	ef 63       	ori	r30, 0x3F	; 63
 5ac:	07 f8       	bld	r0, 7
 5ae:	00 94       	com	r0
 5b0:	07 fa       	bst	r0, 7
 5b2:	db 01       	movw	r26, r22
 5b4:	b9 01       	movw	r22, r18
 5b6:	9d 01       	movw	r18, r26
 5b8:	dc 01       	movw	r26, r24
 5ba:	ca 01       	movw	r24, r20
 5bc:	ad 01       	movw	r20, r26
 5be:	ef 93       	push	r30
 5c0:	41 d0       	rcall	.+130    	; 0x644 <__divsf3_pse>
 5c2:	43 d1       	rcall	.+646    	; 0x84a <__fp_round>
 5c4:	0a d0       	rcall	.+20     	; 0x5da <atan>
 5c6:	5f 91       	pop	r21
 5c8:	55 23       	and	r21, r21
 5ca:	31 f0       	breq	.+12     	; 0x5d8 <atan2+0x54>
 5cc:	2b ed       	ldi	r18, 0xDB	; 219
 5ce:	3f e0       	ldi	r19, 0x0F	; 15
 5d0:	49 e4       	ldi	r20, 0x49	; 73
 5d2:	50 fd       	sbrc	r21, 0
 5d4:	49 ec       	ldi	r20, 0xC9	; 201
 5d6:	63 cf       	rjmp	.-314    	; 0x49e <__addsf3>
 5d8:	08 95       	ret

000005da <atan>:
 5da:	df 93       	push	r29
 5dc:	dd 27       	eor	r29, r29
 5de:	b9 2f       	mov	r27, r25
 5e0:	bf 77       	andi	r27, 0x7F	; 127
 5e2:	40 e8       	ldi	r20, 0x80	; 128
 5e4:	5f e3       	ldi	r21, 0x3F	; 63
 5e6:	16 16       	cp	r1, r22
 5e8:	17 06       	cpc	r1, r23
 5ea:	48 07       	cpc	r20, r24
 5ec:	5b 07       	cpc	r21, r27
 5ee:	10 f4       	brcc	.+4      	; 0x5f4 <atan+0x1a>
 5f0:	d9 2f       	mov	r29, r25
 5f2:	65 d1       	rcall	.+714    	; 0x8be <inverse>
 5f4:	9f 93       	push	r25
 5f6:	8f 93       	push	r24
 5f8:	7f 93       	push	r23
 5fa:	6f 93       	push	r22
 5fc:	ca d1       	rcall	.+916    	; 0x992 <square>
 5fe:	e8 e6       	ldi	r30, 0x68	; 104
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	f0 d0       	rcall	.+480    	; 0x7e4 <__fp_powser>
 604:	22 d1       	rcall	.+580    	; 0x84a <__fp_round>
 606:	2f 91       	pop	r18
 608:	3f 91       	pop	r19
 60a:	4f 91       	pop	r20
 60c:	5f 91       	pop	r21
 60e:	6a d1       	rcall	.+724    	; 0x8e4 <__mulsf3x>
 610:	dd 23       	and	r29, r29
 612:	49 f0       	breq	.+18     	; 0x626 <atan+0x4c>
 614:	90 58       	subi	r25, 0x80	; 128
 616:	a2 ea       	ldi	r26, 0xA2	; 162
 618:	2a ed       	ldi	r18, 0xDA	; 218
 61a:	3f e0       	ldi	r19, 0x0F	; 15
 61c:	49 ec       	ldi	r20, 0xC9	; 201
 61e:	5f e3       	ldi	r21, 0x3F	; 63
 620:	d0 78       	andi	r29, 0x80	; 128
 622:	5d 27       	eor	r21, r29
 624:	4d df       	rcall	.-358    	; 0x4c0 <__addsf3x>
 626:	df 91       	pop	r29
 628:	10 c1       	rjmp	.+544    	; 0x84a <__fp_round>
 62a:	08 d1       	rcall	.+528    	; 0x83c <__fp_pscB>
 62c:	40 f0       	brcs	.+16     	; 0x63e <atan+0x64>
 62e:	ff d0       	rcall	.+510    	; 0x82e <__fp_pscA>
 630:	30 f0       	brcs	.+12     	; 0x63e <atan+0x64>
 632:	21 f4       	brne	.+8      	; 0x63c <atan+0x62>
 634:	5f 3f       	cpi	r21, 0xFF	; 255
 636:	19 f0       	breq	.+6      	; 0x63e <atan+0x64>
 638:	cc c0       	rjmp	.+408    	; 0x7d2 <__fp_inf>
 63a:	51 11       	cpse	r21, r1
 63c:	3a c1       	rjmp	.+628    	; 0x8b2 <__fp_szero>
 63e:	cf c0       	rjmp	.+414    	; 0x7de <__fp_nan>

00000640 <__divsf3x>:
 640:	15 d1       	rcall	.+554    	; 0x86c <__fp_split3>
 642:	98 f3       	brcs	.-26     	; 0x62a <atan+0x50>

00000644 <__divsf3_pse>:
 644:	99 23       	and	r25, r25
 646:	c9 f3       	breq	.-14     	; 0x63a <atan+0x60>
 648:	55 23       	and	r21, r21
 64a:	b1 f3       	breq	.-20     	; 0x638 <atan+0x5e>
 64c:	95 1b       	sub	r25, r21
 64e:	55 0b       	sbc	r21, r21
 650:	bb 27       	eor	r27, r27
 652:	aa 27       	eor	r26, r26
 654:	62 17       	cp	r22, r18
 656:	73 07       	cpc	r23, r19
 658:	84 07       	cpc	r24, r20
 65a:	38 f0       	brcs	.+14     	; 0x66a <__divsf3_pse+0x26>
 65c:	9f 5f       	subi	r25, 0xFF	; 255
 65e:	5f 4f       	sbci	r21, 0xFF	; 255
 660:	22 0f       	add	r18, r18
 662:	33 1f       	adc	r19, r19
 664:	44 1f       	adc	r20, r20
 666:	aa 1f       	adc	r26, r26
 668:	a9 f3       	breq	.-22     	; 0x654 <__divsf3_pse+0x10>
 66a:	33 d0       	rcall	.+102    	; 0x6d2 <__divsf3_pse+0x8e>
 66c:	0e 2e       	mov	r0, r30
 66e:	3a f0       	brmi	.+14     	; 0x67e <__divsf3_pse+0x3a>
 670:	e0 e8       	ldi	r30, 0x80	; 128
 672:	30 d0       	rcall	.+96     	; 0x6d4 <__divsf3_pse+0x90>
 674:	91 50       	subi	r25, 0x01	; 1
 676:	50 40       	sbci	r21, 0x00	; 0
 678:	e6 95       	lsr	r30
 67a:	00 1c       	adc	r0, r0
 67c:	ca f7       	brpl	.-14     	; 0x670 <__divsf3_pse+0x2c>
 67e:	29 d0       	rcall	.+82     	; 0x6d2 <__divsf3_pse+0x8e>
 680:	fe 2f       	mov	r31, r30
 682:	27 d0       	rcall	.+78     	; 0x6d2 <__divsf3_pse+0x8e>
 684:	66 0f       	add	r22, r22
 686:	77 1f       	adc	r23, r23
 688:	88 1f       	adc	r24, r24
 68a:	bb 1f       	adc	r27, r27
 68c:	26 17       	cp	r18, r22
 68e:	37 07       	cpc	r19, r23
 690:	48 07       	cpc	r20, r24
 692:	ab 07       	cpc	r26, r27
 694:	b0 e8       	ldi	r27, 0x80	; 128
 696:	09 f0       	breq	.+2      	; 0x69a <__divsf3_pse+0x56>
 698:	bb 0b       	sbc	r27, r27
 69a:	80 2d       	mov	r24, r0
 69c:	bf 01       	movw	r22, r30
 69e:	ff 27       	eor	r31, r31
 6a0:	93 58       	subi	r25, 0x83	; 131
 6a2:	5f 4f       	sbci	r21, 0xFF	; 255
 6a4:	2a f0       	brmi	.+10     	; 0x6b0 <__divsf3_pse+0x6c>
 6a6:	9e 3f       	cpi	r25, 0xFE	; 254
 6a8:	51 05       	cpc	r21, r1
 6aa:	68 f0       	brcs	.+26     	; 0x6c6 <__divsf3_pse+0x82>
 6ac:	92 c0       	rjmp	.+292    	; 0x7d2 <__fp_inf>
 6ae:	01 c1       	rjmp	.+514    	; 0x8b2 <__fp_szero>
 6b0:	5f 3f       	cpi	r21, 0xFF	; 255
 6b2:	ec f3       	brlt	.-6      	; 0x6ae <__divsf3_pse+0x6a>
 6b4:	98 3e       	cpi	r25, 0xE8	; 232
 6b6:	dc f3       	brlt	.-10     	; 0x6ae <__divsf3_pse+0x6a>
 6b8:	86 95       	lsr	r24
 6ba:	77 95       	ror	r23
 6bc:	67 95       	ror	r22
 6be:	b7 95       	ror	r27
 6c0:	f7 95       	ror	r31
 6c2:	9f 5f       	subi	r25, 0xFF	; 255
 6c4:	c9 f7       	brne	.-14     	; 0x6b8 <__divsf3_pse+0x74>
 6c6:	88 0f       	add	r24, r24
 6c8:	91 1d       	adc	r25, r1
 6ca:	96 95       	lsr	r25
 6cc:	87 95       	ror	r24
 6ce:	97 f9       	bld	r25, 7
 6d0:	08 95       	ret
 6d2:	e1 e0       	ldi	r30, 0x01	; 1
 6d4:	66 0f       	add	r22, r22
 6d6:	77 1f       	adc	r23, r23
 6d8:	88 1f       	adc	r24, r24
 6da:	bb 1f       	adc	r27, r27
 6dc:	62 17       	cp	r22, r18
 6de:	73 07       	cpc	r23, r19
 6e0:	84 07       	cpc	r24, r20
 6e2:	ba 07       	cpc	r27, r26
 6e4:	20 f0       	brcs	.+8      	; 0x6ee <__divsf3_pse+0xaa>
 6e6:	62 1b       	sub	r22, r18
 6e8:	73 0b       	sbc	r23, r19
 6ea:	84 0b       	sbc	r24, r20
 6ec:	ba 0b       	sbc	r27, r26
 6ee:	ee 1f       	adc	r30, r30
 6f0:	88 f7       	brcc	.-30     	; 0x6d4 <__divsf3_pse+0x90>
 6f2:	e0 95       	com	r30
 6f4:	08 95       	ret

000006f6 <__fixsfsi>:
 6f6:	04 d0       	rcall	.+8      	; 0x700 <__fixunssfsi>
 6f8:	68 94       	set
 6fa:	b1 11       	cpse	r27, r1
 6fc:	da c0       	rjmp	.+436    	; 0x8b2 <__fp_szero>
 6fe:	08 95       	ret

00000700 <__fixunssfsi>:
 700:	bd d0       	rcall	.+378    	; 0x87c <__fp_splitA>
 702:	88 f0       	brcs	.+34     	; 0x726 <__fixunssfsi+0x26>
 704:	9f 57       	subi	r25, 0x7F	; 127
 706:	90 f0       	brcs	.+36     	; 0x72c <__fixunssfsi+0x2c>
 708:	b9 2f       	mov	r27, r25
 70a:	99 27       	eor	r25, r25
 70c:	b7 51       	subi	r27, 0x17	; 23
 70e:	a0 f0       	brcs	.+40     	; 0x738 <__fixunssfsi+0x38>
 710:	d1 f0       	breq	.+52     	; 0x746 <__fixunssfsi+0x46>
 712:	66 0f       	add	r22, r22
 714:	77 1f       	adc	r23, r23
 716:	88 1f       	adc	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	1a f0       	brmi	.+6      	; 0x722 <__fixunssfsi+0x22>
 71c:	ba 95       	dec	r27
 71e:	c9 f7       	brne	.-14     	; 0x712 <__fixunssfsi+0x12>
 720:	12 c0       	rjmp	.+36     	; 0x746 <__fixunssfsi+0x46>
 722:	b1 30       	cpi	r27, 0x01	; 1
 724:	81 f0       	breq	.+32     	; 0x746 <__fixunssfsi+0x46>
 726:	c4 d0       	rcall	.+392    	; 0x8b0 <__fp_zero>
 728:	b1 e0       	ldi	r27, 0x01	; 1
 72a:	08 95       	ret
 72c:	c1 c0       	rjmp	.+386    	; 0x8b0 <__fp_zero>
 72e:	67 2f       	mov	r22, r23
 730:	78 2f       	mov	r23, r24
 732:	88 27       	eor	r24, r24
 734:	b8 5f       	subi	r27, 0xF8	; 248
 736:	39 f0       	breq	.+14     	; 0x746 <__fixunssfsi+0x46>
 738:	b9 3f       	cpi	r27, 0xF9	; 249
 73a:	cc f3       	brlt	.-14     	; 0x72e <__fixunssfsi+0x2e>
 73c:	86 95       	lsr	r24
 73e:	77 95       	ror	r23
 740:	67 95       	ror	r22
 742:	b3 95       	inc	r27
 744:	d9 f7       	brne	.-10     	; 0x73c <__fixunssfsi+0x3c>
 746:	3e f4       	brtc	.+14     	; 0x756 <__fixunssfsi+0x56>
 748:	90 95       	com	r25
 74a:	80 95       	com	r24
 74c:	70 95       	com	r23
 74e:	61 95       	neg	r22
 750:	7f 4f       	sbci	r23, 0xFF	; 255
 752:	8f 4f       	sbci	r24, 0xFF	; 255
 754:	9f 4f       	sbci	r25, 0xFF	; 255
 756:	08 95       	ret

00000758 <__floatunsisf>:
 758:	e8 94       	clt
 75a:	09 c0       	rjmp	.+18     	; 0x76e <__floatsisf+0x12>

0000075c <__floatsisf>:
 75c:	97 fb       	bst	r25, 7
 75e:	3e f4       	brtc	.+14     	; 0x76e <__floatsisf+0x12>
 760:	90 95       	com	r25
 762:	80 95       	com	r24
 764:	70 95       	com	r23
 766:	61 95       	neg	r22
 768:	7f 4f       	sbci	r23, 0xFF	; 255
 76a:	8f 4f       	sbci	r24, 0xFF	; 255
 76c:	9f 4f       	sbci	r25, 0xFF	; 255
 76e:	99 23       	and	r25, r25
 770:	a9 f0       	breq	.+42     	; 0x79c <__floatsisf+0x40>
 772:	f9 2f       	mov	r31, r25
 774:	96 e9       	ldi	r25, 0x96	; 150
 776:	bb 27       	eor	r27, r27
 778:	93 95       	inc	r25
 77a:	f6 95       	lsr	r31
 77c:	87 95       	ror	r24
 77e:	77 95       	ror	r23
 780:	67 95       	ror	r22
 782:	b7 95       	ror	r27
 784:	f1 11       	cpse	r31, r1
 786:	f8 cf       	rjmp	.-16     	; 0x778 <__floatsisf+0x1c>
 788:	fa f4       	brpl	.+62     	; 0x7c8 <__floatsisf+0x6c>
 78a:	bb 0f       	add	r27, r27
 78c:	11 f4       	brne	.+4      	; 0x792 <__floatsisf+0x36>
 78e:	60 ff       	sbrs	r22, 0
 790:	1b c0       	rjmp	.+54     	; 0x7c8 <__floatsisf+0x6c>
 792:	6f 5f       	subi	r22, 0xFF	; 255
 794:	7f 4f       	sbci	r23, 0xFF	; 255
 796:	8f 4f       	sbci	r24, 0xFF	; 255
 798:	9f 4f       	sbci	r25, 0xFF	; 255
 79a:	16 c0       	rjmp	.+44     	; 0x7c8 <__floatsisf+0x6c>
 79c:	88 23       	and	r24, r24
 79e:	11 f0       	breq	.+4      	; 0x7a4 <__floatsisf+0x48>
 7a0:	96 e9       	ldi	r25, 0x96	; 150
 7a2:	11 c0       	rjmp	.+34     	; 0x7c6 <__floatsisf+0x6a>
 7a4:	77 23       	and	r23, r23
 7a6:	21 f0       	breq	.+8      	; 0x7b0 <__floatsisf+0x54>
 7a8:	9e e8       	ldi	r25, 0x8E	; 142
 7aa:	87 2f       	mov	r24, r23
 7ac:	76 2f       	mov	r23, r22
 7ae:	05 c0       	rjmp	.+10     	; 0x7ba <__floatsisf+0x5e>
 7b0:	66 23       	and	r22, r22
 7b2:	71 f0       	breq	.+28     	; 0x7d0 <__floatsisf+0x74>
 7b4:	96 e8       	ldi	r25, 0x86	; 134
 7b6:	86 2f       	mov	r24, r22
 7b8:	70 e0       	ldi	r23, 0x00	; 0
 7ba:	60 e0       	ldi	r22, 0x00	; 0
 7bc:	2a f0       	brmi	.+10     	; 0x7c8 <__floatsisf+0x6c>
 7be:	9a 95       	dec	r25
 7c0:	66 0f       	add	r22, r22
 7c2:	77 1f       	adc	r23, r23
 7c4:	88 1f       	adc	r24, r24
 7c6:	da f7       	brpl	.-10     	; 0x7be <__floatsisf+0x62>
 7c8:	88 0f       	add	r24, r24
 7ca:	96 95       	lsr	r25
 7cc:	87 95       	ror	r24
 7ce:	97 f9       	bld	r25, 7
 7d0:	08 95       	ret

000007d2 <__fp_inf>:
 7d2:	97 f9       	bld	r25, 7
 7d4:	9f 67       	ori	r25, 0x7F	; 127
 7d6:	80 e8       	ldi	r24, 0x80	; 128
 7d8:	70 e0       	ldi	r23, 0x00	; 0
 7da:	60 e0       	ldi	r22, 0x00	; 0
 7dc:	08 95       	ret

000007de <__fp_nan>:
 7de:	9f ef       	ldi	r25, 0xFF	; 255
 7e0:	80 ec       	ldi	r24, 0xC0	; 192
 7e2:	08 95       	ret

000007e4 <__fp_powser>:
 7e4:	df 93       	push	r29
 7e6:	cf 93       	push	r28
 7e8:	1f 93       	push	r17
 7ea:	0f 93       	push	r16
 7ec:	ff 92       	push	r15
 7ee:	ef 92       	push	r14
 7f0:	df 92       	push	r13
 7f2:	7b 01       	movw	r14, r22
 7f4:	8c 01       	movw	r16, r24
 7f6:	68 94       	set
 7f8:	05 c0       	rjmp	.+10     	; 0x804 <__fp_powser+0x20>
 7fa:	da 2e       	mov	r13, r26
 7fc:	ef 01       	movw	r28, r30
 7fe:	72 d0       	rcall	.+228    	; 0x8e4 <__mulsf3x>
 800:	fe 01       	movw	r30, r28
 802:	e8 94       	clt
 804:	a5 91       	lpm	r26, Z+
 806:	25 91       	lpm	r18, Z+
 808:	35 91       	lpm	r19, Z+
 80a:	45 91       	lpm	r20, Z+
 80c:	55 91       	lpm	r21, Z+
 80e:	ae f3       	brts	.-22     	; 0x7fa <__fp_powser+0x16>
 810:	ef 01       	movw	r28, r30
 812:	56 de       	rcall	.-852    	; 0x4c0 <__addsf3x>
 814:	fe 01       	movw	r30, r28
 816:	97 01       	movw	r18, r14
 818:	a8 01       	movw	r20, r16
 81a:	da 94       	dec	r13
 81c:	79 f7       	brne	.-34     	; 0x7fc <__fp_powser+0x18>
 81e:	df 90       	pop	r13
 820:	ef 90       	pop	r14
 822:	ff 90       	pop	r15
 824:	0f 91       	pop	r16
 826:	1f 91       	pop	r17
 828:	cf 91       	pop	r28
 82a:	df 91       	pop	r29
 82c:	08 95       	ret

0000082e <__fp_pscA>:
 82e:	00 24       	eor	r0, r0
 830:	0a 94       	dec	r0
 832:	16 16       	cp	r1, r22
 834:	17 06       	cpc	r1, r23
 836:	18 06       	cpc	r1, r24
 838:	09 06       	cpc	r0, r25
 83a:	08 95       	ret

0000083c <__fp_pscB>:
 83c:	00 24       	eor	r0, r0
 83e:	0a 94       	dec	r0
 840:	12 16       	cp	r1, r18
 842:	13 06       	cpc	r1, r19
 844:	14 06       	cpc	r1, r20
 846:	05 06       	cpc	r0, r21
 848:	08 95       	ret

0000084a <__fp_round>:
 84a:	09 2e       	mov	r0, r25
 84c:	03 94       	inc	r0
 84e:	00 0c       	add	r0, r0
 850:	11 f4       	brne	.+4      	; 0x856 <__fp_round+0xc>
 852:	88 23       	and	r24, r24
 854:	52 f0       	brmi	.+20     	; 0x86a <__fp_round+0x20>
 856:	bb 0f       	add	r27, r27
 858:	40 f4       	brcc	.+16     	; 0x86a <__fp_round+0x20>
 85a:	bf 2b       	or	r27, r31
 85c:	11 f4       	brne	.+4      	; 0x862 <__fp_round+0x18>
 85e:	60 ff       	sbrs	r22, 0
 860:	04 c0       	rjmp	.+8      	; 0x86a <__fp_round+0x20>
 862:	6f 5f       	subi	r22, 0xFF	; 255
 864:	7f 4f       	sbci	r23, 0xFF	; 255
 866:	8f 4f       	sbci	r24, 0xFF	; 255
 868:	9f 4f       	sbci	r25, 0xFF	; 255
 86a:	08 95       	ret

0000086c <__fp_split3>:
 86c:	57 fd       	sbrc	r21, 7
 86e:	90 58       	subi	r25, 0x80	; 128
 870:	44 0f       	add	r20, r20
 872:	55 1f       	adc	r21, r21
 874:	59 f0       	breq	.+22     	; 0x88c <__fp_splitA+0x10>
 876:	5f 3f       	cpi	r21, 0xFF	; 255
 878:	71 f0       	breq	.+28     	; 0x896 <__fp_splitA+0x1a>
 87a:	47 95       	ror	r20

0000087c <__fp_splitA>:
 87c:	88 0f       	add	r24, r24
 87e:	97 fb       	bst	r25, 7
 880:	99 1f       	adc	r25, r25
 882:	61 f0       	breq	.+24     	; 0x89c <__fp_splitA+0x20>
 884:	9f 3f       	cpi	r25, 0xFF	; 255
 886:	79 f0       	breq	.+30     	; 0x8a6 <__fp_splitA+0x2a>
 888:	87 95       	ror	r24
 88a:	08 95       	ret
 88c:	12 16       	cp	r1, r18
 88e:	13 06       	cpc	r1, r19
 890:	14 06       	cpc	r1, r20
 892:	55 1f       	adc	r21, r21
 894:	f2 cf       	rjmp	.-28     	; 0x87a <__fp_split3+0xe>
 896:	46 95       	lsr	r20
 898:	f1 df       	rcall	.-30     	; 0x87c <__fp_splitA>
 89a:	08 c0       	rjmp	.+16     	; 0x8ac <__fp_splitA+0x30>
 89c:	16 16       	cp	r1, r22
 89e:	17 06       	cpc	r1, r23
 8a0:	18 06       	cpc	r1, r24
 8a2:	99 1f       	adc	r25, r25
 8a4:	f1 cf       	rjmp	.-30     	; 0x888 <__fp_splitA+0xc>
 8a6:	86 95       	lsr	r24
 8a8:	71 05       	cpc	r23, r1
 8aa:	61 05       	cpc	r22, r1
 8ac:	08 94       	sec
 8ae:	08 95       	ret

000008b0 <__fp_zero>:
 8b0:	e8 94       	clt

000008b2 <__fp_szero>:
 8b2:	bb 27       	eor	r27, r27
 8b4:	66 27       	eor	r22, r22
 8b6:	77 27       	eor	r23, r23
 8b8:	cb 01       	movw	r24, r22
 8ba:	97 f9       	bld	r25, 7
 8bc:	08 95       	ret

000008be <inverse>:
 8be:	9b 01       	movw	r18, r22
 8c0:	ac 01       	movw	r20, r24
 8c2:	60 e0       	ldi	r22, 0x00	; 0
 8c4:	70 e0       	ldi	r23, 0x00	; 0
 8c6:	80 e8       	ldi	r24, 0x80	; 128
 8c8:	9f e3       	ldi	r25, 0x3F	; 63
 8ca:	66 c0       	rjmp	.+204    	; 0x998 <__divsf3>

000008cc <__mulsf3>:
 8cc:	0b d0       	rcall	.+22     	; 0x8e4 <__mulsf3x>
 8ce:	bd cf       	rjmp	.-134    	; 0x84a <__fp_round>
 8d0:	ae df       	rcall	.-164    	; 0x82e <__fp_pscA>
 8d2:	28 f0       	brcs	.+10     	; 0x8de <__mulsf3+0x12>
 8d4:	b3 df       	rcall	.-154    	; 0x83c <__fp_pscB>
 8d6:	18 f0       	brcs	.+6      	; 0x8de <__mulsf3+0x12>
 8d8:	95 23       	and	r25, r21
 8da:	09 f0       	breq	.+2      	; 0x8de <__mulsf3+0x12>
 8dc:	7a cf       	rjmp	.-268    	; 0x7d2 <__fp_inf>
 8de:	7f cf       	rjmp	.-258    	; 0x7de <__fp_nan>
 8e0:	11 24       	eor	r1, r1
 8e2:	e7 cf       	rjmp	.-50     	; 0x8b2 <__fp_szero>

000008e4 <__mulsf3x>:
 8e4:	c3 df       	rcall	.-122    	; 0x86c <__fp_split3>
 8e6:	a0 f3       	brcs	.-24     	; 0x8d0 <__mulsf3+0x4>

000008e8 <__mulsf3_pse>:
 8e8:	95 9f       	mul	r25, r21
 8ea:	d1 f3       	breq	.-12     	; 0x8e0 <__mulsf3+0x14>
 8ec:	95 0f       	add	r25, r21
 8ee:	50 e0       	ldi	r21, 0x00	; 0
 8f0:	55 1f       	adc	r21, r21
 8f2:	62 9f       	mul	r22, r18
 8f4:	f0 01       	movw	r30, r0
 8f6:	72 9f       	mul	r23, r18
 8f8:	bb 27       	eor	r27, r27
 8fa:	f0 0d       	add	r31, r0
 8fc:	b1 1d       	adc	r27, r1
 8fe:	63 9f       	mul	r22, r19
 900:	aa 27       	eor	r26, r26
 902:	f0 0d       	add	r31, r0
 904:	b1 1d       	adc	r27, r1
 906:	aa 1f       	adc	r26, r26
 908:	64 9f       	mul	r22, r20
 90a:	66 27       	eor	r22, r22
 90c:	b0 0d       	add	r27, r0
 90e:	a1 1d       	adc	r26, r1
 910:	66 1f       	adc	r22, r22
 912:	82 9f       	mul	r24, r18
 914:	22 27       	eor	r18, r18
 916:	b0 0d       	add	r27, r0
 918:	a1 1d       	adc	r26, r1
 91a:	62 1f       	adc	r22, r18
 91c:	73 9f       	mul	r23, r19
 91e:	b0 0d       	add	r27, r0
 920:	a1 1d       	adc	r26, r1
 922:	62 1f       	adc	r22, r18
 924:	83 9f       	mul	r24, r19
 926:	a0 0d       	add	r26, r0
 928:	61 1d       	adc	r22, r1
 92a:	22 1f       	adc	r18, r18
 92c:	74 9f       	mul	r23, r20
 92e:	33 27       	eor	r19, r19
 930:	a0 0d       	add	r26, r0
 932:	61 1d       	adc	r22, r1
 934:	23 1f       	adc	r18, r19
 936:	84 9f       	mul	r24, r20
 938:	60 0d       	add	r22, r0
 93a:	21 1d       	adc	r18, r1
 93c:	82 2f       	mov	r24, r18
 93e:	76 2f       	mov	r23, r22
 940:	6a 2f       	mov	r22, r26
 942:	11 24       	eor	r1, r1
 944:	9f 57       	subi	r25, 0x7F	; 127
 946:	50 40       	sbci	r21, 0x00	; 0
 948:	8a f0       	brmi	.+34     	; 0x96c <__stack+0x6d>
 94a:	e1 f0       	breq	.+56     	; 0x984 <__stack+0x85>
 94c:	88 23       	and	r24, r24
 94e:	4a f0       	brmi	.+18     	; 0x962 <__stack+0x63>
 950:	ee 0f       	add	r30, r30
 952:	ff 1f       	adc	r31, r31
 954:	bb 1f       	adc	r27, r27
 956:	66 1f       	adc	r22, r22
 958:	77 1f       	adc	r23, r23
 95a:	88 1f       	adc	r24, r24
 95c:	91 50       	subi	r25, 0x01	; 1
 95e:	50 40       	sbci	r21, 0x00	; 0
 960:	a9 f7       	brne	.-22     	; 0x94c <__stack+0x4d>
 962:	9e 3f       	cpi	r25, 0xFE	; 254
 964:	51 05       	cpc	r21, r1
 966:	70 f0       	brcs	.+28     	; 0x984 <__stack+0x85>
 968:	34 cf       	rjmp	.-408    	; 0x7d2 <__fp_inf>
 96a:	a3 cf       	rjmp	.-186    	; 0x8b2 <__fp_szero>
 96c:	5f 3f       	cpi	r21, 0xFF	; 255
 96e:	ec f3       	brlt	.-6      	; 0x96a <__stack+0x6b>
 970:	98 3e       	cpi	r25, 0xE8	; 232
 972:	dc f3       	brlt	.-10     	; 0x96a <__stack+0x6b>
 974:	86 95       	lsr	r24
 976:	77 95       	ror	r23
 978:	67 95       	ror	r22
 97a:	b7 95       	ror	r27
 97c:	f7 95       	ror	r31
 97e:	e7 95       	ror	r30
 980:	9f 5f       	subi	r25, 0xFF	; 255
 982:	c1 f7       	brne	.-16     	; 0x974 <__stack+0x75>
 984:	fe 2b       	or	r31, r30
 986:	88 0f       	add	r24, r24
 988:	91 1d       	adc	r25, r1
 98a:	96 95       	lsr	r25
 98c:	87 95       	ror	r24
 98e:	97 f9       	bld	r25, 7
 990:	08 95       	ret

00000992 <square>:
 992:	9b 01       	movw	r18, r22
 994:	ac 01       	movw	r20, r24
 996:	9a cf       	rjmp	.-204    	; 0x8cc <__mulsf3>

00000998 <__divsf3>:
 998:	53 de       	rcall	.-858    	; 0x640 <__divsf3x>
 99a:	57 cf       	rjmp	.-338    	; 0x84a <__fp_round>

0000099c <__itoa_ncheck>:
 99c:	bb 27       	eor	r27, r27
 99e:	4a 30       	cpi	r20, 0x0A	; 10
 9a0:	31 f4       	brne	.+12     	; 0x9ae <__itoa_ncheck+0x12>
 9a2:	99 23       	and	r25, r25
 9a4:	22 f4       	brpl	.+8      	; 0x9ae <__itoa_ncheck+0x12>
 9a6:	bd e2       	ldi	r27, 0x2D	; 45
 9a8:	90 95       	com	r25
 9aa:	81 95       	neg	r24
 9ac:	9f 4f       	sbci	r25, 0xFF	; 255
 9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <__utoa_common>

000009b0 <__utoa_ncheck>:
 9b0:	bb 27       	eor	r27, r27

000009b2 <__utoa_common>:
 9b2:	fb 01       	movw	r30, r22
 9b4:	55 27       	eor	r21, r21
 9b6:	aa 27       	eor	r26, r26
 9b8:	88 0f       	add	r24, r24
 9ba:	99 1f       	adc	r25, r25
 9bc:	aa 1f       	adc	r26, r26
 9be:	a4 17       	cp	r26, r20
 9c0:	10 f0       	brcs	.+4      	; 0x9c6 <__utoa_common+0x14>
 9c2:	a4 1b       	sub	r26, r20
 9c4:	83 95       	inc	r24
 9c6:	50 51       	subi	r21, 0x10	; 16
 9c8:	b9 f7       	brne	.-18     	; 0x9b8 <__utoa_common+0x6>
 9ca:	a0 5d       	subi	r26, 0xD0	; 208
 9cc:	aa 33       	cpi	r26, 0x3A	; 58
 9ce:	08 f0       	brcs	.+2      	; 0x9d2 <__utoa_common+0x20>
 9d0:	a9 5d       	subi	r26, 0xD9	; 217
 9d2:	a1 93       	st	Z+, r26
 9d4:	00 97       	sbiw	r24, 0x00	; 0
 9d6:	79 f7       	brne	.-34     	; 0x9b6 <__utoa_common+0x4>
 9d8:	b1 11       	cpse	r27, r1
 9da:	b1 93       	st	Z+, r27
 9dc:	11 92       	st	Z+, r1
 9de:	cb 01       	movw	r24, r22
 9e0:	00 c0       	rjmp	.+0      	; 0x9e2 <strrev>

000009e2 <strrev>:
 9e2:	dc 01       	movw	r26, r24
 9e4:	fc 01       	movw	r30, r24
 9e6:	67 2f       	mov	r22, r23
 9e8:	71 91       	ld	r23, Z+
 9ea:	77 23       	and	r23, r23
 9ec:	e1 f7       	brne	.-8      	; 0x9e6 <strrev+0x4>
 9ee:	32 97       	sbiw	r30, 0x02	; 2
 9f0:	04 c0       	rjmp	.+8      	; 0x9fa <strrev+0x18>
 9f2:	7c 91       	ld	r23, X
 9f4:	6d 93       	st	X+, r22
 9f6:	70 83       	st	Z, r23
 9f8:	62 91       	ld	r22, -Z
 9fa:	ae 17       	cp	r26, r30
 9fc:	bf 07       	cpc	r27, r31
 9fe:	c8 f3       	brcs	.-14     	; 0x9f2 <strrev+0x10>
 a00:	08 95       	ret

00000a02 <_exit>:
 a02:	f8 94       	cli

00000a04 <__stop_program>:
 a04:	ff cf       	rjmp	.-2      	; 0xa04 <__stop_program>
